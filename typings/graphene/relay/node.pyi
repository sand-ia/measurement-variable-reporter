"""
This type stub file was generated by pyright.
"""

from ..types import Field, Interface

def is_node(objecttype): # -> bool:
    """
    Check if the given objecttype has Node as an interface
    """
    ...

class GlobalID(Field):
    def __init__(self, node=..., parent_type=..., required=..., *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def id_resolver(parent_resolver, node, root, info, parent_type_name=..., **args):
        ...
    
    def get_resolver(self, parent_resolver): # -> partial[Unknown]:
        ...
    


class NodeField(Field):
    def __init__(self, node, type=..., **kwargs) -> None:
        ...
    
    def get_resolver(self, parent_resolver): # -> partial[Any | None]:
        ...
    


class AbstractNode(Interface):
    class Meta:
        abstract = ...
    
    
    @classmethod
    def __init_subclass_with_meta__(cls, **options): # -> None:
        ...
    


class Node(AbstractNode):
    """An object with an ID"""
    @classmethod
    def Field(cls, *args, **kwargs): # -> NodeField:
        ...
    
    @classmethod
    def node_resolver(cls, only_type, root, info, id): # -> Any | None:
        ...
    
    @classmethod
    def get_node_from_global_id(cls, info, global_id, only_type=...): # -> Any | None:
        ...
    
    @classmethod
    def from_global_id(cls, global_id): # -> tuple[str, str]:
        ...
    
    @classmethod
    def to_global_id(cls, type, id): # -> str:
        ...
    


