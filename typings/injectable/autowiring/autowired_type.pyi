"""
This type stub file was generated by pyright.
"""

from typing import Sequence, TypeVar, Union

T = TypeVar("T")
class _Autowired:
    def __init__(self, dependency: Union[T, str], *, namespace: str = ..., group: str = ..., exclude_groups: Sequence[str] = ..., lazy: bool = ...) -> None:
        ...
    
    def inject(self) -> T:
        ...
    


class Autowired:
    """
    Autowired type annotation marks a parameter to be autowired for injection.

    Autowired parameters must be last in declaration if there are others which aren't
    autowired. Also, autowired parameters must not be given default values.

    This type annotation does not performs the function autowiring by itself. The
    function must be decorated with :meth:`@autowired <injectable.autowired>` for
    autowiring.


    :param dependency: class, base class or qualifier of the dependency to be used
            for lookup among the registered injectables. Can be wrapped in a typing
            sequence, e.g. ``List[...]``, to inject a list containing all matching
            injectables. Can be wrapped in a optional, e.g. ``Optional[...]``, to
            inject None if no matches are found to inject. ``Optional[List[...]]`` is
            valid and will inject an empty list if no matches are found to inject.
    :param namespace: (optional) namespace in which to look for the dependency.
            Defaults to :const:`injectable.constants.DEFAULT_NAMESPACE`.
    :param group: (optional) group to filter out other injectables outside of this
            group. Defaults to None.
    :param exclude_groups: (optional) list of groups to be excluded. Defaults to
            None.
    :param lazy: (optional) when True will return an instance which will
            automatically initialize itself when first used but not before that.
            Defaults to False.

    Usage::

      >>> from injectable import Autowired, autowired
      >>>
      >>> @autowired
      ... def foo(arg: Autowired("qualifier")):
      ...     ...
    """
    def __new__(cls, dependency: Union[T, str], *, namespace: str = ..., group: str = ..., exclude_groups: Sequence[str] = ..., lazy: bool = ...) -> T:
        ...
    


